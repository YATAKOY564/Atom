class Block {
  constructor(previousHash, data) {
    this.data = data;
    this.hash = this.calculateHash();
    this.previousHash = previousHash;
    this.timeStamp = new Date();
    this.nonce = 0;
  }

  calculateHash() {
    return hash(
        this.previousHash + 
        JSON.stringify(this.data) +
        this.timeStamp +
        this.nonce
    ).toString();
  }

  mine(difficulty) {
    while (!this.hash.startsWith("0".repeat(difficulty))) {
      this.nonce++;
      this.hash = this.calculateHash();
    }
  }
}

class Blockchain {
  constructor() {
    let genesisBlock = new Block("0", { isGenesis: true });
    this.chain = [genesisBlock];
  }

  addBlock(data) {
    let lastBlock = this.chain[this.chain.length - 1];
    let newBlock = new Block(lastBlock.hash, data);
    newBlock.mine(2); // find a hash for new block
    this.chain.push(newBlock);
  }

  isValid() {
    for (let i = 1; i < this.chain.length; i++) {
      const currentBlock = this.chain[i];
      const previousBlock = this.chain[i - 1];
      if (currentBlock.hash != currentBlock.calculateHash()) return false;
      if (currentBlock.previousHash != previousBlock.hash) return false;
    }
    return true;
  }
}


// SHA256 realisation

var hash = function sha256(ascii) {
    function rightRotate(value, amount) {
        return (value>>>amount) | (value<<(32 - amount));
    };
    
    var mathPow = Math.pow;
    var maxWord = mathPow(2, 32);
    var lengthProperty = 'length'
    var i, j; 
    var result = ''
    var words = [];
    var asciiBitLength = ascii[lengthProperty]*8;
    var hash = sha256.h = sha256.h || [];
    var k = sha256.k = sha256.k || [];
    var primeCounter = k[lengthProperty];
    var isComposite = {};
    for (var candidate = 2; primeCounter < 64; candidate++) {
        if (!isComposite[candidate]) {
            for (i = 0; i < 313; i += candidate) {
                isComposite[i] = candidate;
            }
            hash[primeCounter] = (mathPow(candidate, .5)*maxWord)|0;
            k[primeCounter++] = (mathPow(candidate, 1/3)*maxWord)|0;
        }
    }
    
    ascii += '\x80'
    while (ascii[lengthProperty]%64 - 56) ascii += '\x00'
    for (i = 0; i < ascii[lengthProperty]; i++) {
        j = ascii.charCodeAt(i);
        if (j>>8) return;
        words[i>>2] |= j << ((3 - i)%4)*8;
    }
    words[words[lengthProperty]] = ((asciiBitLength/maxWord)|0);
    words[words[lengthProperty]] = (asciiBitLength)
    
    for (j = 0; j < words[lengthProperty];) {
        var w = words.slice(j, j += 16); 
        var oldHash = hash;
        hash = hash.slice(0, 8);
        
        for (i = 0; i < 64; i++) {
            var i2 = i + j;
            var w15 = w[i - 15], w2 = w[i - 2];
            var a = hash[0], e = hash[4];
            var temp1 = hash[7]
                + (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25))
                + ((e&hash[5])^((~e)&hash[6])) // ch
                + k[i]
                // Expand the message schedule if needed
                + (w[i] = (i < 16) ? w[i] : (
                        w[i - 16]
                        + (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15>>>3))
                        + w[i - 7]
                        + (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2>>>10))
                    )|0
                );
            var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22))
                + ((a&hash[1])^(a&hash[2])^(hash[1]&hash[2])); // maj
            
            hash = [(temp1 + temp2)|0].concat(hash);
            hash[4] = (hash[4] + temp1)|0;
        }
        
        for (i = 0; i < 8; i++) {
            hash[i] = (hash[i] + oldHash[i])|0;
        }
    }
    
    for (i = 0; i < 8; i++) {
        for (j = 3; j + 1; j--) {
            var b = (hash[i]>>(j*8))&255;
            result += ((b < 16) ? 0 : '') + b.toString(16);
        }
    }
    return result;
};

// Test

blockchain = new Blockchain();
blockchain.addBlock("Bob loves Alice");
blockchain.addBlock("Bob sends Alice USD 100");
blockchain.addBlock("Alice loves Bob");
console.log(JSON.stringify(blockchain, "", " "));
console.log("Is valid: " + blockchain.isValid());

Сначала открываем пустой файл и создаем класс Block.
Конструктор – это функция, которая автоматически вызывается при создании переменной этого класса. 
Она будет принимать 2 аргумента. Первый – Хэш предыдущего блока, второй – Контент, который нужно записать в блок.
Внутри конструктора мы инициализируем блок начальными параметрами. Мы выставляем timeStamp на текущее системное время, а nonce – на ноль.
Хэш самого блока сразу же рассчитывается в зависимости от его содержимого. 
Таким образом достигается неизменность блокчейн. 
То есть для изменения одного блока в прошлом, хакеру придется пересчитать и поменять все хэши последующих блоков. 
Это займет ОЧЕНЬ много времени в реальном блокчейне.
Теперь давайте посмотрим на функцию calculateHash.
Эта функция нужна для того, чтобы генерировать хэш блока на базе его содержимого: хэша предыдущего блока, контента,
текущей даты и результата решения криптографической задачи. Тут мы используем функцию hash, которая реализует алгоритм SHA256. 
На вход ей направляется одна символьная строка, которая получается простым объединением всех данных, которые есть в блоке.
Теперь давайте посмотрим на последнюю функции класса Block: на функцию майнинга mine.
Функция mine продолжает увеличивать nonce до тех пор, пока результирующий Хэш не будет начинаться с заданного 
числа нулей (difficulty). Чем выше параметр difficulty, тем сложнее найти решение криптозадачи, потому что решение 
находится методом перебора.
Создаем класс Blockchain
Наш блокчейн содержит один массив, который называется chain. Мы начнем эту цепочку с нулевого блока, у которого нет 
предшественников – он называется genesisBlock. При его создании мы передаем 0 в качестве хэша предыдущего блока.
Возвращаемся к нашему блокчейну. Теперь мы имплементируем функцию addBlock – чтобы мы могли добавлять блоки к цепочке.
Эта функция принимает Контент нового блока в качестве входного параметра. Блок добавляется на базе Контента и хэша последнего блока, 
сохраненного в цепочке. Как вы помните, для того чтобы добавить новый блок нам необходимо решить криптографическую 
задачу – в данном случае вызвать функцию mine(difficulty).
Обычно эту функцию вызывают майнеры, но в данном случае мы выступаем одновременно и пользователями сети (посылаем транзакции) и 
майнерами (решаем криптографические задачи). Мы задаем difficulty на уровне 2, для того чтобы поиск решения не занял слишком много 
времени. Попробуйте поставить бОльшие значения. Полагаю, что уже на уровне 6 или 7 ваш компьютер никогда не найдет ответ. 
После успешного нахождения хэша нам нужно просто добавить новый блок в цепочку.
Наконец, нам нужно реализовать функцию isValid. Она нужна, чтобы можно было проверить валидность цепочки блоков – что какой-то из 
блоков не был подменен и все правила сети выполняются.
